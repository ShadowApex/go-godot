package godot

{{ $view := . -}}
{{ $view.Header }}

/*
#include <stdio.h>
#include <stdlib.h>
#include <gdnative/gdnative.h>
#include <nativescript/godot_nativescript.h>
*/
import "C"

import (
    "log"
	"reflect"
	"unsafe"
)

// Class is an interface for any objects that can have Godot
// inheritance.
type Class interface {
	baseClass() string
	setOwner(object *C.godot_object)
	getOwner() *C.godot_object
}

{{ range $i, $class := $view.APIs -}}
    {{ if $view.IsValidClass $class.Name $class.BaseClass -}}
        {{ if $class.Singleton -}}
            func newSingleton{{ $view.GoClassName $class.Name }}() *{{ $view.SetClassName $class.Name $class.Singleton}} {
                obj := &{{ $view.SetClassName $class.Name $class.Singleton }}{}
				name := C.CString("{{ $class.Name }}")
				defer C.free(unsafe.Pointer(name))
                ptr := C.godot_global_get_singleton(name)
                obj.owner = (*C.godot_object)(ptr)
                return obj
            }
            /*
            {{ $view.ClassDoc $class.Name }}
            */
            var {{ $view.GoClassName $class.Name }} = newSingleton{{ $view.GoClassName $class.Name }}()
        {{ end }}
        /*
        {{ $view.ClassDoc $class.Name }}
        */
        type {{ $view.SetClassName $class.Name $class.Singleton }} struct {
            {{ $view.SetBaseClassName $class.BaseClass }}
            {{ if eq $class.Name "Object" }}
                owner *C.godot_object
            {{ end }}
        }

        func (o *{{ $view.SetClassName $class.Name $class.Singleton }}) baseClass() string {
            return "{{ $class.Name }}"
        }

        {{ if $class.Methods }}
            {{ range $j, $method := $class.Methods }}
                /*
                {{ $view.MethodDoc $class.Name $method.Name }}
                */
                func (o *{{ $view.SetClassName $class.Name $class.Singleton }}) {{ $view.GoMethodName $method.Name }}({{ range $k, $arg := $method.Arguments }}{{ $view.GoArgName $arg.Name }} {{ $view.GoValue $arg.Type }},{{ end }}) {{ $view.GoValue $method.ReturnType }} {
                    log.Println("Calling {{ $class.Name }}.{{ $view.GoMethodName $method.Name }}()")

                    {{ if ne $method.ReturnType "void" }}
                        returnValue := {{ $view.GodotCall $method }}
                        log.Println("  Got return value: ", returnValue)

                        {{ if $view.IsObjectReturnType $method }}
                            var ret {{ $view.GoValue $method.ReturnType }}
                            ret.owner = returnValue.owner
                            return ret
                        {{ else }}
                            return returnValue
                        {{ end}}
                    {{else}}
                        {{ $view.GodotCall $method }}
                        log.Println("  Function successfully completed.")
                    {{ end }}
                }
            {{ end }}
        {{ end }}

        {{ if eq $class.Name "Object" }}
            // SetOwner will internally set the Godot object inside the struct.
            // This is used to call parent methods.
            func (o *Object) setOwner(object *C.godot_object) {
                o.owner = object
            }
            
            func (o *Object) getOwner() *C.godot_object {
                return o.owner
            }
        {{ end }}
        {{ if eq $class.Singleton false -}} 
            /*
            {{ $class.Name }}Implementer is an interface for {{ $class.Name }} objects.
            */
            type {{ $class.Name }}Implementer interface {
                    Class
            }
        {{ end -}}
    {{ end -}}
{{ end }}


// godotToGoConverter is a function that will convert a Godot object into
// a Go object.
type godotToGoConverter func(gdObject unsafe.Pointer) reflect.Value

// godotToGoConversionMap is an internal mapping of Godot types to functions that can
// convert to Go types. This mapping is essentially a more optimal case/switch
// system for converting Godot types to Go types.
var godotToGoConversionMap = map[string]godotToGoConverter{
	"bool": func(gdObject unsafe.Pointer) reflect.Value {
		converted := (*C.godot_bool)(gdObject)
		return reflect.ValueOf(godotBoolAsBool(*converted))
	},
	"int64": func(gdObject unsafe.Pointer) reflect.Value {
        converted := (*C.godot_int)(gdObject)
		return reflect.ValueOf(godotIntAsInt(*converted))
	},
	"uint64": func(gdObject unsafe.Pointer) reflect.Value {
		converted := (*C.uint64_t)(gdObject)
		return reflect.ValueOf(uint64(*converted))
	},
	"float64": func(gdObject unsafe.Pointer) reflect.Value {
		converted := (*C.godot_real)(gdObject)
		return reflect.ValueOf(float64(*converted))
	},
    "string": func(gdObject unsafe.Pointer) reflect.Value {
        converted := (*C.godot_string)(gdObject)
        return reflect.ValueOf(godotStringAsString(converted))
    },
	"*Array": func(gdObject unsafe.Pointer) reflect.Value {
        converted := &Array{}
        converted.array = (*C.godot_array)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*Basis": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &Basis{}
        converted.basis = (*C.godot_basis)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*Color": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &Color{}
        converted.color = (*C.godot_color)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*Dictionary": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &Dictionary{}
        converted.dictionary = (*C.godot_dictionary)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*NodePath": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &NodePath{}
        converted.nodePath = (*C.godot_node_path)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*Plane": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &Plane{}
        converted.plane = (*C.godot_plane)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*Quat": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &Quat{}
        converted.quat = (*C.godot_quat)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*Rect2": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &Rect2{}
        converted.rect2 = (*C.godot_rect2)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*AABB": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &AABB{}
        converted.aabb = (*C.godot_aabb)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*RID": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &RID{}
        converted.rid = (*C.godot_rid)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*Transform": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &Transform{}
        converted.transform = (*C.godot_transform)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*Transform2D": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &Transform2D{}
        converted.transform2d = (*C.godot_transform2d)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*Variant": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &Variant{}
        converted.variant = (*C.godot_variant)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*Vector2": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &Vector2{}
        converted.vector2 = (*C.godot_vector2)(gdObject)
		return reflect.ValueOf(converted)
	},
	"*Vector3": func(gdObject unsafe.Pointer) reflect.Value {
		converted := &Vector3{}
        converted.vector3 = (*C.godot_vector3)(gdObject)
		return reflect.ValueOf(converted)
	},

    {{ range $i, $class := $view.APIs -}}
        {{ if $view.IsValidClass $class.Name $class.BaseClass -}}
            "*{{ $view.SetClassName $class.Name $class.Singleton }}": func(gdObject unsafe.Pointer) reflect.Value {
            	owner := (*C.godot_object)(gdObject)
                goObject := &{{ $view.SetClassName $class.Name $class.Singleton }}{}
                goObject.setOwner(owner)

                return reflect.ValueOf(goObject)
            },
        {{ end }}
    {{ end }}
}
